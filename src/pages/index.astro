---
import { Image } from "astro:assets";
import "../styles/index.scss";

import landingPageBackground from "../images/bread-background.webp";
import brandLogo from "../images/logo-text-w.svg";

const opengraphTitle = "Tartine Studio - Bient√¥t disponible";
const opengraphDescription =
  "Studio de d√©veloppement web sur mesure. Bient√¥t disponible pour r√©aliser vos projets digitaux";
const opengraphUrl = "https://www.tartine.studio";
---

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta
      name="author"
      content="Tartine Studio <contact@tartine.studio> | Camille Briand <camille@tartine.studio> | Thibault Lepez <thibault@tartine.studio>"
    />
    <meta name="description" content={opengraphDescription} />

    <meta
      name="keywords"
      content="web development, web design, digital agency, website development, custom websites, web studio, creative agency, responsive design, modern web development, web apps"
    />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={opengraphUrl} />
    <meta property="og:title" content={opengraphTitle} />
    <meta property="og:description" content={opengraphDescription} />
    <meta property="og:image" content="/og-image.jpg" />
    <meta property="og:locale" content="fr_FR" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={opengraphUrl} />
    <meta name="twitter:title" content={opengraphTitle} />
    <meta name="twitter:description" content={opengraphDescription} />
    <meta name="twitter:image" content="/og-image.jpg" />

    <title>Tartine Studio</title>
  </head>

  <body>
    <div class="loading-text"></div>

    <Image
      src={landingPageBackground}
      class="landing-background"
      alt="Du pain sur un torchon, pr√™t √† √™tre d√©coup√© en tartines"
    />

    <div class="brand-container">
      <Image
        id="brand"
        src={brandLogo}
        alt="Le logo de Tartine Studio dans un style isomorphique, avec un toast sur la gauche et le nom de l'entreprise sur la droite"
      />
      <p class="tagline">
        Votre studio de d√©veloppement web sur mesure
        <br />
        Bient√¥t disponible
      </p>
      <address>
        <a
          href="mailto:contact@tartine.studio"
          title="Nous √©crire"
          target="_blank"
        >
          contact@tartine.studio
        </a>
      </address>
    </div>

    <script>
      import { gsap } from "gsap";

      const CONFIG = {
        loadingDuration: 3,
        typewriterSpeed: 10,
        typewriterDeleteSpeed: 20,
        cycleInterval: 800,
        animations: {
          taglineDelay: 1.5,
          addressDelay: 1,
          fadeOutDuration: 0.2,
          blurDuration: 1.5,
          fadeInDuration: 1,
        },
      };

      const sentences = [
        "Pr√©paration du grille-pain...",
        "D√©coupe des tartines...",
        "√âtalage du beurre...",
        "Ramassage des miettes",
      ];

      const elements = {
        brandImage: document.querySelector("#brand") as HTMLElement,
        background: document.querySelector(
          ".landing-background"
        ) as HTMLImageElement,
        loadingText: document.querySelector(".loading-text") as HTMLElement,
        tagline: document.querySelector(".tagline") as HTMLElement,
        address: document.querySelector("address") as HTMLElement,
        emailLink: document.querySelector("address a") as HTMLElement,
      };

      const titles = {
        original: document.title,
        hidden: "üçû Pr√©paration de la Tartine",
      };

      document.addEventListener("visibilitychange", () => {
        document.title = document.hidden ? titles.hidden : titles.original;
      });

      if (elements.background && elements.loadingText && elements.brandImage) {
        let currentSentenceIndex = 0;
        let isAnimating = false;
        const activeIntervals = new Set<NodeJS.Timeout>();
        let hasStartedMainAnimation = false;

        const typeText = (text: string): Promise<void> => {
          return new Promise((resolve) => {
            let charIndex = 0;
            const interval = setInterval(() => {
              if (charIndex < text.length) {
                elements.loadingText.textContent += text[charIndex];
                charIndex++;
              } else {
                activeIntervals.delete(interval);
                clearInterval(interval);
                resolve();
              }
            }, CONFIG.typewriterSpeed);
            activeIntervals.add(interval);
          });
        };

        const deleteText = (): Promise<void> => {
          return new Promise((resolve) => {
            const interval = setInterval(() => {
              const currentText = elements.loadingText.textContent;
              if (currentText && currentText.length > 0) {
                elements.loadingText.textContent = currentText.slice(0, -1);
              } else {
                activeIntervals.delete(interval);
                clearInterval(interval);
                resolve();
              }
            }, CONFIG.typewriterDeleteSpeed);
            activeIntervals.add(interval);
          });
        };

        const cycleLoadingText = async () => {
          if (isAnimating || hasStartedMainAnimation) return;
          isAnimating = true;

          await deleteText();
          currentSentenceIndex = (currentSentenceIndex + 1) % sentences.length;
          await typeText(sentences[currentSentenceIndex]);
          isAnimating = false;
        };

        typeText(sentences[0]);

        const cycleInterval = setInterval(
          cycleLoadingText,
          CONFIG.cycleInterval
        );

        const pulseAnimation = gsap.to(elements.loadingText, {
          opacity: 0.5,
          duration: 1,
          repeat: -1,
          yoyo: true,
          ease: "power1.inOut",
        });

        const cleanupLoading = () => {
          clearInterval(cycleInterval);
          activeIntervals.forEach((interval) => clearInterval(interval));
          activeIntervals.clear();
          pulseAnimation.kill();
          isAnimating = false;
        };

        const startMainAnimation = () => {
          if (hasStartedMainAnimation) return;
          hasStartedMainAnimation = true;

          const tl = gsap.timeline();

          tl.to(elements.loadingText, {
            opacity: 0,
            duration: CONFIG.animations.fadeOutDuration,
            onStart: cleanupLoading,
            onComplete: () => {
              elements.loadingText.remove();
            },
          })
            .fromTo(
              elements.background,
              { opacity: 1, filter: "blur(0px)" },
              {
                filter: "blur(20px)",
                duration: CONFIG.animations.blurDuration,
                ease: "power2.out",
              },
              "<"
            )
            .fromTo(
              elements.brandImage,
              { opacity: 0 },
              {
                opacity: 1,
                duration: CONFIG.animations.fadeInDuration,
                ease: "power2.out",
              },
              "<0.2"
            );

          if (elements.tagline) {
            tl.to(
              elements.tagline,
              {
                opacity: 1,
                height: "auto",
                duration: 1.5,
                ease: "power2.out",
              },
              `>+${CONFIG.animations.taglineDelay}`
            );

            if (elements.address && elements.emailLink) {
              tl.to(
                elements.address,
                {
                  opacity: 1,
                  duration: 1,
                  ease: "power2.out",
                },
                `>+${CONFIG.animations.addressDelay}`
              ).to(
                elements.emailLink,
                {
                  skewX: -15,
                  duration: 2.5,
                  ease: "power2.out",
                },
                "<"
              );
            }
          }

          return tl;
        };

        const checkImageAndStart = () => {
          if (
            elements.background.complete &&
            elements.background.naturalHeight !== 0
          ) {
            gsap.delayedCall(CONFIG.loadingDuration, startMainAnimation);
          } else {
            elements.background.addEventListener("load", () => {
              gsap.delayedCall(CONFIG.loadingDuration, startMainAnimation);
            });

            elements.background.addEventListener("error", () => {
              console.error("Failed to load background image");
              gsap.delayedCall(CONFIG.loadingDuration, startMainAnimation);
            });
          }
        };

        checkImageAndStart();
      }
    </script>
  </body>
</html>
